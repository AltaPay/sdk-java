plugins {
    id "java"
    id "com.github.bjornvester.xjc" version "1.8.2"
    id 'java-library'
    id "maven-publish"
    id "signing"
    id "org.jreleaser" version "1.20.0"
}

group = 'com.altapay'
version = '3.0.1'

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'net.sourceforge.javacsv:javacsv:2.0'
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation 'commons-codec:commons-codec:1.17.1'

    testImplementation platform('org.junit:junit-bom:5.11.4')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.glassfish.jaxb:jaxb-runtime:3.0.2'

    integrationTestImplementation platform('org.junit:junit-bom:5.11.4')
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-params'
    integrationTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    integrationTestRuntimeOnly 'org.glassfish.jaxb:jaxb-runtime:3.0.2'
}

xjc {
    xjcVersion.set("3.0.2")
    useJakarta.set(true)
    markGenerated.set(true)
    xsdDir.set(layout.projectDirectory.dir("src/main/resources/xsd"))
    outputResourcesDir.set(layout.projectDirectory.dir("generated"))
    defaultPackage.set("com.pensio.api.generated")
    bindingFiles = layout.files(layout.projectDirectory.file("src/main/resources/xsd/bindings.xjb"))
}

test {
    useJUnitPlatform()
}

tasks.register("integrationTest", Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter(tasks.test)
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "sdk-java"
            from components.java

            pom {
                name = "sdk-java"
                description = "JavaSDK - for integrating Java projects with the AltaPay gateway."
                url = "https://github.com/AltaPay/sdk-java"
                scm {
                    connection = "scm:https://github.com/AltaPay/sdk-java.git"
                    developerConnection = "scm:git://github.com:AltaPay/sdk-java.git"
                    url = "https://github.com/AltaPay/sdk-java"
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/AltaPay/sdk-java/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "altapay"
                        name = "AltaPay"
                        email = "3rdpartydeps@altapay.com"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "staging"
            url = layout.buildDirectory.dir("jreleaser/staging-deploy").get().asFile.toURI()
        }
    }
}


signing {
    sign publishing.publications.mavenJava
}

tasks.named("jreleaserDeploy").configure {
    dependsOn(
        tasks.named("publishMavenJavaPublicationToStagingRepository")
    )
}

jreleaser {
  project {
    name = "sdk-java"
    description = "JavaSDK - for integrating Java projects with the AltaPay gateway."
    links { homepage = "https://github.com/AltaPay/sdk-java" }
  }

  deploy {
    maven {
      mavenCentral {
        sonatype {
          active = 'ALWAYS'
          url = 'https://central.sonatype.com/api/v1/publisher'
          username = providers.gradleProperty("jreleaser.mavencentral.username").orNull
          password = providers.gradleProperty("jreleaser.mavencentral.password").orNull
          // Artifacts are already signed by Gradle
          sign = false
          // Path where Gradle stages the signed repo
          stagingRepository(
            layout.buildDirectory.dir("jreleaser/staging-deploy").get().asFile.absolutePath
          )
        }
      }
    }
  }
}


import org.gradle.api.publish.maven.tasks.PublishToMavenRepository

plugins {
    id "java"
    id "com.github.bjornvester.xjc" version "1.8.2"
    id 'java-library'
    id "maven-publish"
    id "signing"
}

group = 'com.altapay'
version = '3.0.1.1'

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'net.sourceforge.javacsv:javacsv:2.0'
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation 'commons-codec:commons-codec:1.17.1'

    testImplementation platform('org.junit:junit-bom:5.11.4')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.glassfish.jaxb:jaxb-runtime:3.0.2'

    integrationTestImplementation platform('org.junit:junit-bom:5.11.4')
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-params'
    integrationTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    integrationTestRuntimeOnly 'org.glassfish.jaxb:jaxb-runtime:3.0.2'
}

xjc {
    xjcVersion.set("3.0.2")
    useJakarta.set(true)
    markGenerated.set(true)
    xsdDir.set(layout.projectDirectory.dir("src/main/resources/xsd"))
    outputResourcesDir.set(layout.projectDirectory.dir("generated"))
    defaultPackage.set("com.pensio.api.generated")
    bindingFiles = layout.files(layout.projectDirectory.file("src/main/resources/xsd/bindings.xjb"))
}

test {
    useJUnitPlatform()
}

tasks.register("integrationTest", Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output
    classpath = sourceSets.integrationTest.runtimeClasspath

    shouldRunAfter test
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "sdk-java"
            from components.java

            pom {
                name = "sdk-java"
                description = "JavaSDK - for integrating Java projects with the AltaPay gateway."
                url = "https://github.com/AltaPay/sdk-java"
                scm {
                    connection = "scm:https://github.com/AltaPay/sdk-java.git"
                    developerConnection = "scm:git://github.com:AltaPay/sdk-java.git"
                    url = "https://github.com/AltaPay/sdk-java"
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/AltaPay/sdk-java/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "altapay"
                        name = "AltaPay"
                        email = "3rdpartydeps@altapay.com"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username = "$usr"
                password = "$pwd"
            }
            url = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
        }
    }
}

tasks.withType(PublishToMavenRepository).configureEach {
    finalizedBy(tasks.named("centralManualUpload"))
}

signing {
    sign publishing.publications.mavenJava
}

tasks.register("centralManualUpload") {
    group = "publishing"
    description = "POST to /manual/upload/defaultRepository/com.altapay"
    doLast {
        def urlStr = "https://ossrh-staging-api.central.sonatype.com/manual/upload/defaultRepository/com.altapay"
        def conn = (HttpURLConnection) new URL(urlStr).openConnection()
        conn.setRequestMethod("POST")
        conn.setDoOutput(true)

        // Basic auth with the same token pair used for upload
        def basic = "${usr}:${pwd}".bytes.encodeBase64().toString()
        conn.setRequestProperty("Authorization", "Basic ${basic}")

        // Empty body is fine; just trigger the action
        conn.getOutputStream().withCloseable { /* no payload */ }

        int code = conn.getResponseCode()
        if (code < 200 || code >= 300) {
            def err = conn.getErrorStream() ? conn.getErrorStream().getText("UTF-8") : "<no error body>"
            throw new GradleException("Central manual upload failed (HTTP ${code}). ${err}")
        }
        logger.lifecycle("Central manual upload requested successfully (HTTP ${code}).")
    }
}
